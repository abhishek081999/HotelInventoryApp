//Binding Syntax 

Interpolation {}
Property Binding []=""
Event Binding ()=""


//Directives
custom or inbuilt 
Structural Directives
Attribute Directives
use to change behaviour and appearance of DOM element
can implement all lifecycle hooks,
can not have template
Built-in Directives:
*ngIf *ngFor *ngSwitch
ngClass ngStyle

//Pipes 
data transformation
don't change actual object
built-in Pipes : DatePipe UpperCase LowerCase Currency Secimal Percent Json Slice Async

//Add BootStrap in Angular
ng add ngx-bootstrap
Styles.css
D:\FreeCodeCamp\Angular\Project\hotelinventoryapp\node_modules\bootstrap\dist\css\bootstrap.min.css
or angular.json
node_modules/bootstrap/dist/css/bootstrap.min.css

//Lifecycle Hooks and component communication
Component instance has lifecycle hooks which can help you to hook into different events on components.
lifecycle ends when component is destroyed
ngOnChanges (@Input @Output) bellow>>
ngOnInit:after constructor>>
ngDoCheck :any event is raised DoCheck will we called not implement ngonchange and docheck together
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngOnDestroy

//Component communication
Using @Input and @Output
Using @ViewChild and @ContentChild
Using Services

roomList component is in onchange detection stratergy onpush. the change detection tree will check this component is marked onpush
run the change detection if something change inside this component
changeDetection: ChangeDetectionStratergy.onpush
we are not running ChangeDetectionStratergy untill and unless needed
>>>component should not changa data internally
>>>in case of assigning and passing data , the property should be immutable
this.roomList =[...this.roomList,room]

//ngOnChanges only apply where  @input property recides
or input properties get updated or new value
very useful in case you want to control what value needs to be updated whenever new data is passed
you want to run change detection mannually,Services!

ngAfterViewInit (whatever view i have it also initialise)>> viewChild
ngAfterViewChecked
ViewChild> template ref > Dynamic load component

ngAfterContentInit>>@ContentChild()>ng-content  content projection


//Dependency Injection
DI Providers
Dependencies are services or object needed by classes to perform some function.
it's a Design Pattern
Angular has built-in Dependencies Injection Support
(DI Providers .>Class Based providers. Value Providers.> Factory)
Service ng g s <srevice-name>  (Reusable code)
                    Depencency Resolution>:      

                                 NullInjector()
                          always throw an Error unless
                               you use @Optional()
                                       ^
                                      ||
                                 ModuleInjector
                         ( Configure by PlatformModule )
             has special things like DomSanitizer=> PlatformBrowser()
                                       ^
                                       ||
                                Root ModuleInjector
                         ( Configured by YourAppModule)
                 has things for your app =>bootstrapModule(YourAppModule)
                            
Resolution MOdifier
@Self   @SkipSelf @Optional @Host 


//HttpClient & RxJs Obserable
    setting Up HttpClient
    Rxjs, obserable and streams 
    http methods Rxjs Operators
    http Interceptors
    APP_INITIALIZER
Push vs Pull Architecture
getData -> addData -> getData  Pull
getData ->continus streamof data -> addData

Rxjs is library for  writing Reactive Programmig.
Obeserables are stream of data to which we can subscribe.
 stream = new Observable(observer =>{    
    observer.next('user1');
    observer.next('user2');
    observer.next('user3');
    observer.complete();
    // observer.error('error');
  })

  this.stream.subscribe((data)=>{console.log(data)});
    this.stream.subscribe({
      next:(value)=> console.log(value),
      complete:()=> console.log('complete'),
      error:(err)=> console.log(err),
    })
Http request>>>>
    getPhotos() {
    const request = new HttpRequest(
      'GET',
      `https://jsonplaceholder.typicode.com/photos`,
      {
        reportProgress: true,
      }
    );
    return this.http.request(request);
  }

  //Rxjs Operators    Everything happen in stream o data before subscribe
  ShareReplay>>cach the request so don't have to make call again
  CatchError
  Map operators

  Http Interceptors and APP_INITIALIZER
  Allow us to intercept request
  we can change data and add headers
  APP_INITIALIZER allows you to inject function as application startup.
  it loads the data before app get initialized  , {configurations}

//Routing

import RouterModule
forRoot method allows us to add multiple route configdefault route
dynamic route
wildcard route 404
Activated route service>allow to read the router data, allow access to snapshot data. Allows to access data from Route Config.


//template drivin form
Import FormsModule to Module
ngModel for 2 way binding
Use HTML5 validations to validate forms. required
disable property to avoid submitting blank forms.
use #templateVariable to access the state of forms.

Custom directive with forms
n g g d hover 
change behaviourof dom on hover 
use HostListner to listen to events
directives :>> are similar to  component but thay are never have template

custom validators for template drivin forms.
add logic to validate the Form Fied

Access the routing events
Navigate using router service


Feature Module and Routing
creating Feature module 
configuring routing at feature module level
forChild used to configure the routes

nested routes & child route
using child  routes we can do nested routing
allowes to load child routes.

Lazy Loading
Allows to split the code at module level 
load  code when user need it
reduce  main bundle DomSanitizer

with lazy loaded
ng g m  booking --route=booking --routing --module=app

without lazy loaded
ng g m search
ng g c search

Provider type 
root 
any for lazy loaded modules new instance of service 


Router Events

Route Guards******************
canActivate
canActivateChild
canDeactivate
canLoad
Resolve